// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data\fonts\default.ttf
// data\models\cube.mtl
// data\models\cube.obj
// data\models\monkey.mtl
// data\models\monkey.obj
// data\models\torus.mtl
// data\models\torus.obj
// data\models\uvsphere.mtl
// data\models\uvsphere.obj
// data\shaders\include\attribute.inc.glsl
// data\shaders\include\material.inc.glsl
// data\shaders\include\mvp.inc.glsl
// +build !release


package dusk

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// bindataDatafontsdefaultttf reads file data from disk. It returns an error on failure.
func bindataDatafontsdefaultttf() (*asset, error) {
	path := "C:\\Go\\src\\github.com\\WhoBrokeTheBuild\\GoDusk\\dusk\\data\\fonts\\default.ttf"
	name := "data/fonts/default.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataDatamodelscubemtl reads file data from disk. It returns an error on failure.
func bindataDatamodelscubemtl() (*asset, error) {
	path := "C:\\Go\\src\\github.com\\WhoBrokeTheBuild\\GoDusk\\dusk\\data\\models\\cube.mtl"
	name := "data/models/cube.mtl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataDatamodelscubeobj reads file data from disk. It returns an error on failure.
func bindataDatamodelscubeobj() (*asset, error) {
	path := "C:\\Go\\src\\github.com\\WhoBrokeTheBuild\\GoDusk\\dusk\\data\\models\\cube.obj"
	name := "data/models/cube.obj"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataDatamodelsmonkeymtl reads file data from disk. It returns an error on failure.
func bindataDatamodelsmonkeymtl() (*asset, error) {
	path := "C:\\Go\\src\\github.com\\WhoBrokeTheBuild\\GoDusk\\dusk\\data\\models\\monkey.mtl"
	name := "data/models/monkey.mtl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataDatamodelsmonkeyobj reads file data from disk. It returns an error on failure.
func bindataDatamodelsmonkeyobj() (*asset, error) {
	path := "C:\\Go\\src\\github.com\\WhoBrokeTheBuild\\GoDusk\\dusk\\data\\models\\monkey.obj"
	name := "data/models/monkey.obj"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataDatamodelstorusmtl reads file data from disk. It returns an error on failure.
func bindataDatamodelstorusmtl() (*asset, error) {
	path := "C:\\Go\\src\\github.com\\WhoBrokeTheBuild\\GoDusk\\dusk\\data\\models\\torus.mtl"
	name := "data/models/torus.mtl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataDatamodelstorusobj reads file data from disk. It returns an error on failure.
func bindataDatamodelstorusobj() (*asset, error) {
	path := "C:\\Go\\src\\github.com\\WhoBrokeTheBuild\\GoDusk\\dusk\\data\\models\\torus.obj"
	name := "data/models/torus.obj"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataDatamodelsuvspheremtl reads file data from disk. It returns an error on failure.
func bindataDatamodelsuvspheremtl() (*asset, error) {
	path := "C:\\Go\\src\\github.com\\WhoBrokeTheBuild\\GoDusk\\dusk\\data\\models\\uvsphere.mtl"
	name := "data/models/uvsphere.mtl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataDatamodelsuvsphereobj reads file data from disk. It returns an error on failure.
func bindataDatamodelsuvsphereobj() (*asset, error) {
	path := "C:\\Go\\src\\github.com\\WhoBrokeTheBuild\\GoDusk\\dusk\\data\\models\\uvsphere.obj"
	name := "data/models/uvsphere.obj"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataDatashadersincludeattributeincglsl reads file data from disk. It returns an error on failure.
func bindataDatashadersincludeattributeincglsl() (*asset, error) {
	path := "C:\\Go\\src\\github.com\\WhoBrokeTheBuild\\GoDusk\\dusk\\data\\shaders\\include\\attribute.inc.glsl"
	name := "data/shaders/include/attribute.inc.glsl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataDatashadersincludematerialincglsl reads file data from disk. It returns an error on failure.
func bindataDatashadersincludematerialincglsl() (*asset, error) {
	path := "C:\\Go\\src\\github.com\\WhoBrokeTheBuild\\GoDusk\\dusk\\data\\shaders\\include\\material.inc.glsl"
	name := "data/shaders/include/material.inc.glsl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// bindataDatashadersincludemvpincglsl reads file data from disk. It returns an error on failure.
func bindataDatashadersincludemvpincglsl() (*asset, error) {
	path := "C:\\Go\\src\\github.com\\WhoBrokeTheBuild\\GoDusk\\dusk\\data\\shaders\\include\\mvp.inc.glsl"
	name := "data/shaders/include/mvp.inc.glsl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"data/fonts/default.ttf":                  bindataDatafontsdefaultttf,
	"data/models/cube.mtl":                    bindataDatamodelscubemtl,
	"data/models/cube.obj":                    bindataDatamodelscubeobj,
	"data/models/monkey.mtl":                  bindataDatamodelsmonkeymtl,
	"data/models/monkey.obj":                  bindataDatamodelsmonkeyobj,
	"data/models/torus.mtl":                   bindataDatamodelstorusmtl,
	"data/models/torus.obj":                   bindataDatamodelstorusobj,
	"data/models/uvsphere.mtl":                bindataDatamodelsuvspheremtl,
	"data/models/uvsphere.obj":                bindataDatamodelsuvsphereobj,
	"data/shaders/include/attribute.inc.glsl": bindataDatashadersincludeattributeincglsl,
	"data/shaders/include/material.inc.glsl":  bindataDatashadersincludematerialincglsl,
	"data/shaders/include/mvp.inc.glsl":       bindataDatashadersincludemvpincglsl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"data": {Func: nil, Children: map[string]*bintree{
		"fonts": {Func: nil, Children: map[string]*bintree{
			"default.ttf": {Func: bindataDatafontsdefaultttf, Children: map[string]*bintree{}},
		}},
		"models": {Func: nil, Children: map[string]*bintree{
			"cube.mtl": {Func: bindataDatamodelscubemtl, Children: map[string]*bintree{}},
			"cube.obj": {Func: bindataDatamodelscubeobj, Children: map[string]*bintree{}},
			"monkey.mtl": {Func: bindataDatamodelsmonkeymtl, Children: map[string]*bintree{}},
			"monkey.obj": {Func: bindataDatamodelsmonkeyobj, Children: map[string]*bintree{}},
			"torus.mtl": {Func: bindataDatamodelstorusmtl, Children: map[string]*bintree{}},
			"torus.obj": {Func: bindataDatamodelstorusobj, Children: map[string]*bintree{}},
			"uvsphere.mtl": {Func: bindataDatamodelsuvspheremtl, Children: map[string]*bintree{}},
			"uvsphere.obj": {Func: bindataDatamodelsuvsphereobj, Children: map[string]*bintree{}},
		}},
		"shaders": {Func: nil, Children: map[string]*bintree{
			"include": {Func: nil, Children: map[string]*bintree{
				"attribute.inc.glsl": {Func: bindataDatashadersincludeattributeincglsl, Children: map[string]*bintree{}},
				"material.inc.glsl": {Func: bindataDatashadersincludematerialincglsl, Children: map[string]*bintree{}},
				"mvp.inc.glsl": {Func: bindataDatashadersincludemvpincglsl, Children: map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
